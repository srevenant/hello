#!/bin/bash

# run this outside of any other ephemer context
# helps to build the environ, before the environ is built

python=$(which python)
install=local

echo python=$python

if [ ! -x "$python" ]; then
	echo "Cannot execute python=$python"
	exit 1
elif [ "$($python --version 2>&1|grep -i python)" ]; then
	vers=$($python --version 2>&1|sed -e 's/ /-/'|tr '[A-Z]' '[a-z]')
else
	echo "$python is not python (?)"
	exit 1
fi

echo "-> $install install using $vers from $python"

# cleanup
echo "-> cleanup old installation..."
find . -type f -name "*.pyc" -exec rm {} \;
rm -rf python

# virtual environ
virtualenv -p $python python

export VIRTUAL_ENV=./python
export PATH=${VIRTUAL_ENV}/bin:${PATH}

if ! pip install -Ur src/requirements.txt; then # --upgrade --target lib -Ur src/requirements.txt; then
	echo ""
	echo "-> Cannot continue !"
	exit 1
fi

exit
# import our stuff
sitepkg=$(find python/ -name site-packages)
nested=$(echo $sitepkg |sed -e 's:[^/][^/]*:..:g')
ln -fs $nested/src/ephemer $sitepkg/ephemer
ln -fs $nested/src/nginxparser.py $sitepkg/nginxparser.py

for f in bin/* $(find test -type f); do
	shebang=$(head -1 $f | grep python)
	if [ -n "$shebang" ]; then
    	echo "#! for $f -> $pypath"

		# sed -i is not uniform on MacOS and Linux, blah
		if cp $f $f.bak; then
			if sed -e "1 s+^.*\$+#"'!'"$pypath+" $f.bak > $f; then
				rm -f $f.bak
			fi
		else
		echo "Cannot backup $f!"
		fi
	fi
done

